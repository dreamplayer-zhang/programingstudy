<Window x:Class="Root_Vega.Dialog_ManualAlign"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:tools="clr-namespace:RootTools;assembly=RootTools"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:behavior="clr-namespace:mousebehavior;assembly=RootTools"
        WindowStyle="None"
        WindowStartupLocation="CenterScreen"
        Background="#FF2D2D30"
        Title="Dialog_ManualAlign"
        Height="620"
        Width="1000">
    <Window.Resources>
        <SolidColorBrush x:Key="TbForeGround"
                         Color="White" />
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.FontFamily"
                    Value="Arial" />
            <Setter Property="TextBlock.Foreground"
                    Value="{StaticResource TbForeGround}" />
            <Setter Property="TextBlock.VerticalAlignment"
                    Value="Center" />
            <Setter Property="TextBlock.TextAlignment"
                    Value="Center" />
        </Style>
        <Style TargetType="{x:Type TextBlock}"
               x:Key="ParameterBlock">
            <Setter Property="TextBlock.FontFamily"
                    Value="Arial" />
            <Setter Property="TextBlock.Foreground"
                    Value="White" />
            <Setter Property="TextBlock.VerticalAlignment"
                    Value="Center" />
            <Setter Property="TextBlock.TextAlignment"
                    Value="Center" />
            <Setter Property="FontSize"
                    Value="20"></Setter>
            <Setter Property="Height"
                    Value="30"></Setter>
            <Setter Property="Margin"
                    Value="5"></Setter>
        </Style>
        <Style TargetType="Button"
               x:Key="MyBtn">
            <Setter Property="FontSize"
                    Value="20"></Setter>
            <Setter Property="Height"
                    Value="30"></Setter>
            <Setter Property="Margin"
                    Value="5"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="0"
                                Background="#FF1B1B1C"
                                BorderBrush="Gray"
                                BorderThickness="0"
                                x:Name="Bdr"
                                Margin="0,0,0,0">
                            <TextBlock FontSize="15"
                                       FontFamily="Arial"
                                       Foreground="White"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center">
                                <ContentPresenter Margin="5" /></TextBlock>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Border.IsMouseOver"
                                     Value="True">
                                <Setter Property="Background"
                                        Value="#FF3E3E40" />
                                <Setter Property="Cursor"
                                        Value="Hand" />
                            </Trigger>
                            <Trigger Property="Button.IsPressed"
                                     Value="True">
                                <Setter TargetName="Bdr"
                                        Property="Background"
                                        Value="#FF43437A" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <i:Interaction.Behaviors>
        <behavior:KeyBehaviour KeyEvent="{Binding KeyEvent, Mode=OneWayToSource}" />
    </i:Interaction.Behaviors>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="8*"></ColumnDefinition>
            <ColumnDefinition Width="2*"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0">
            <tools:ImageViewer DataContext="{Binding p_ImageViewer}"
                               Width="{PriorityBinding}"
                               Height="{PriorityBinding}"
                               x:Name="Viewer"/>
            <Line Panel.ZIndex="999"
                  IsHitTestVisible="false"
                  X1="{Binding vm_X1, Mode=TwoWay}"
                  Y1="{Binding vm_Y1, Mode=TwoWay}"
                  X2="{Binding vm_X2, Mode=TwoWay}"
                  Y2="{Binding vm_Y2, Mode=TwoWay}"
                  Visibility="{Binding vm_vi, Mode=TwoWay}"
                  Stroke="Blue"
                  StrokeThickness="1" />
            <Canvas>
                <Ellipse IsHitTestVisible="false"
                         Fill="Blue"
                         Height="10"
                         Width="10"
                         StrokeThickness="2"
                         Stroke="white"
                         Canvas.Left="{Binding e_X1, Mode=TwoWay}"
                         Canvas.Top="{Binding e_Y1, Mode=TwoWay}"
                         Visibility="{Binding vm_v1, Mode=TwoWay}" />
                <Ellipse IsHitTestVisible="false"
                         Fill="Blue"
                         Height="10"
                         Width="10"
                         StrokeThickness="2"
                         Stroke="white"
                         Canvas.Left="{Binding e_X2, Mode=TwoWay}"
                         Canvas.Top="{Binding e_Y2, Mode=TwoWay}"
                        Visibility="{Binding vm_v2, Mode=TwoWay}" />
            </Canvas>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding MouseLeftButtonDownCommand}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseRightButtonDown">
                    <i:InvokeCommandAction Command="{Binding MouseRightButtonDownCommand}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseMove">
                    <i:InvokeCommandAction Command="{Binding MouseMoveCommand}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseWheel">
                    <i:InvokeCommandAction Command="{Binding MouseWheelCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <i:Interaction.Behaviors>
                <behavior:MouseBehaviour MouseEvent="{Binding MouseEvent, Mode=OneWayToSource}" />
            </i:Interaction.Behaviors>
        </Grid>
        <Grid Grid.Column="1">
            <StackPanel>
                <TextBlock Style="{StaticResource ParameterBlock}"
                           Text="Degree"></TextBlock>
                <TextBlock Style="{StaticResource ParameterBlock}"
                           Text="{Binding AlignText, Mode=TwoWay}"></TextBlock>
                <TextBlock Style="{StaticResource ParameterBlock}"
                           Text=" "></TextBlock>
                <Button Style="{StaticResource MyBtn}"
                        Command="{Binding OkCommand}"
                        Content="Align"></Button>
                <Button Style="{StaticResource MyBtn}"
                        Command="{Binding CancelCommand}"
                        Content="Cancel"></Button>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
