using LiveCharts;
using LiveCharts.Configurations;
using LiveCharts.Defaults;
using LiveCharts.Wpf;
using RootTools;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;

namespace Root_Vega
{
    class AlarmHelper
    {
        public string m_sCode;
        public string m_sState;
        public string m_sClassName;
        public string m_sName;
        public List<DateTime> m_ListSetT = new List<DateTime>();
        public List<DateTime> m_ListClearT = new List<DateTime>();

    }
    class MonthChartHelper
    {

    }
    class WeekChartHelper
    {

    }
    public class DayChartPoint
    {
        public DayChartPoint()
        {
        }

        public DayChartPoint(int sec, double value)
        {
            Sec = sec;
            Value = value;
        }
        public int Sec
        {
            get;
            set;
        }
        public double Value
        {
            get;
            set;
        }
    }

    class _7_AlarmViewModel : ObservableObject
    {
        public _7_AlarmViewModel()
        {
            //ReadAlaram(@"C:\Users\JTL\Desktop\Log");
            var a = m_listAlarm;
            ChartInit();

            LogPoints = new ChartValues<DayChartPoint>();
            //LogPoints.Add(new DayChartPoint(1234, 2));
            //LogPoints.Add(new DayChartPoint(4567, 4));

            //m_listLine = new List<LineSeries>();
            //LineSeries line = new LineSeries();
            //line.Values = LogPoints;
            //m_listLine.Add(line);

            //foreach (LineSeries ls in m_listLine)
            //{
            //    Series.Add(ls);
            //}

            
            // value는 DateModel의 DateTime이 들어가내
            
       }

        #region Property
        private SeriesCollection _series;
        public SeriesCollection Series
        {
            get
            {
                return _series;
            }
            set
            {
                SetProperty(ref _series, value);
            }
        }
        private ChartValues<DayChartPoint> _logPoints;
        public ChartValues<DayChartPoint> LogPoints
        {
            get
            {
                return _logPoints;
            }
            set
            {
                SetProperty(ref _logPoints, value);
            }
        }
        private long _min;
        public long Min
        {
            get
            {
                return _min;
            }
            set
            {
                SetProperty(ref _min, value);
            }
        }
        private long _max;
        public long Max
        {
            get
            {
                return _max;
            }
            set
            {

                SetProperty(ref _max, value);
            }
        }
        private long _step;
        public long Step
        {
            get
            {
                return _step;
            }
            set
            {
                SetProperty(ref _step, value);
            }
        }
        private Func<double, string> _formatter;
        public Func<double, string> Formatter
        {
            get
            {
                return _formatter;
            }
            set
            {
                SetProperty(ref _formatter, value);
            }
        }
        private DateTime _selectedDate = DateTime.Today;
        public DateTime SelectedDate
        {
            
            get
            {
                return _selectedDate;
            }
            set
            {
                SetProperty(ref _selectedDate, value);
                ShowSelectDayLog(SelectedDate);
            }
        }
        #endregion
        List<AlarmHelper> m_listAlarm = new List<AlarmHelper>();
        void ChartInit()
        {
            var Config = Mappers.Xy<DayChartPoint>()
                 .X(DatePoint => DatePoint.Sec)
                 .Y(DatePoint => DatePoint.Value);

            Series = new SeriesCollection(Config);
            Min = 0;
            Max = 3600 * 24;
            Step = 3600;

            Formatter = value =>
            {

                if (value % 3600 == 0)
                {
                    return new DateTime((long)value * TimeSpan.FromSeconds(1).Ticks).ToString("HH:mm");
                }
                else
                    return new DateTime((long)value * TimeSpan.FromSeconds(1).Ticks).ToString("HH:mm:ss");
            };
        }
        void ShowSelectDayLog(DateTime date)
        {
            Series.Clear();
            List<AlarmHelper> ListAlaram = new List<AlarmHelper>();
            List<AlarmHelper> test = new List<AlarmHelper>();
            int a = 1;
            // var temp = new DayChartPoint[1000];
            foreach (AlarmHelper alarm in m_listAlarm)
            {
                if (alarm.m_ListSetT.First().Date == date.Date)
                {
                    a++;
                    LineSeries ls = new LineSeries();
                    ChartValues<DayChartPoint> val = new ChartValues<DayChartPoint>();

                    for(int i =0; i<alarm.m_ListSetT.Count; i++)
                    {
                        int hour = alarm.m_ListSetT[i].Hour * 3600;
                        int minute = alarm.m_ListSetT[i].Minute * 60;
                        int total = hour + minute + alarm.m_ListSetT[i].Second;

                        val.Add(new DayChartPoint(total, a));
                        
                        int chour = alarm.m_ListClearT[i].Hour * 3600;
                        int cminute = alarm.m_ListClearT[i].Minute * 60;
                        int ctotal = chour + cminute + alarm.m_ListClearT[i].Second;
                        val.Add(new DayChartPoint(ctotal, a));

                        val.Add(new DayChartPoint(ctotal, double.NaN));
                    }
                    //int hour = alarm.m_SetTime.Hour * 3600;
                    //int minute = alarm.m_SetTime.Minute * 60;
                    //int total = hour + minute + alarm.m_SetTime.Second;
                    //val.Add(new DayChartPoint(total, a));

                    //int chour = alarm.m_ClearTime.Hour * 3600;
                    //int cminute = alarm.m_ClearTime.Minute * 60;
                    //int ctotal = chour + cminute + alarm.m_ClearTime.Second;
                    //val.Add(new DayChartPoint(ctotal, a));

                    //val.Add(new DayChartPoint(0, double.NaN));

                    //val.Add(new DayChartPoint(ctotal + 12000, a));

                    //val.Add(new DayChartPoint(ctotal + 24000, a));

                    //ls.Fill = Brushes.Transparent;
                    ls.Opacity = 1;
                    ls.StrokeThickness = 5;
                    ls.Title = alarm.m_sName;
                    ls.Values = val;

                    
                    Series.Add(ls);

                    //test.Add(alarm);
                }
            }

        }
        public void ReadAlaram(string path)
        {
            
            DirectoryInfo[] dirs = new DirectoryInfo(path).GetDirectories(EQ.m_sModel, SearchOption.AllDirectories);
            foreach(DirectoryInfo di in dirs)
            {
                List<AlarmHelper> AlarmTemp = new List<AlarmHelper>();
                FileInfo[] files = di.GetFiles("*.csv", SearchOption.AllDirectories);
                foreach (FileInfo fi in files)
                {
                    
                    List<AlarmHelper> BeforeSort = new List<AlarmHelper>();
                    if (fi.Name.Contains("AlarmData"))
                    {
                        string fileName = fi.Name.Replace("\\\\", "\\");
                        using (FileStream fs = new FileStream(fi.FullName, FileMode.Open))
                        {
                            StreamReader r = new StreamReader(fs, Encoding.Default, true);
                            string str;
                            char sp = '\t';
                            char sp2 = ' ';
                            AlarmHelper alarm;

                            while ((str = r.ReadLine()) != string.Empty && str != null && str != " ")
                            {                    
                                alarm = new AlarmHelper();
                                string[] Log;
                                string[] Temp;
                                Log = str.Split(sp);
                                Temp = Log[3].Split(sp2);

                                alarm.m_sName = Temp[4];
                                alarm.m_sCode = Log[1];
                                alarm.m_sState = Temp[0];
                                alarm.m_sClassName = Temp[2];
                                if (alarm.m_sState == "Set")
                                {
                                    alarm.m_ListSetT.Add(Convert.ToDateTime(Log[0]));
                                }
                                if (alarm.m_sState == "Clear")
                                {
                                    alarm.m_ListClearT.Add(Convert.ToDateTime(Log[0]));
                                }
                                BeforeSort.Add(alarm);
                            }

                            List<string> ListName = new List<string>();
                            AlarmTemp = new List<AlarmHelper>();
                            for (int i = 0; i < BeforeSort.Count; i++)
                            {
                                AlarmHelper find = BeforeSort[i];
                                AlarmHelper sort = new AlarmHelper();

                                foreach(AlarmHelper ah in AlarmTemp) // 현재 File에서 같은 이름은 무시
                                {
                                    ListName.Add(ah.m_sName);
                                }
                                if (ListName.Contains(find.m_sName))
                                    continue;

                                var Data = from data in BeforeSort
                                           where data.m_sName == find.m_sName
                                           where data.m_sClassName == find.m_sClassName
                                           select data;
                                List<AlarmHelper> sorting = Data.ToList();
                                
                                sort.m_sName = find.m_sName;
                                sort.m_sClassName = find.m_sClassName;
                                sort.m_sCode = find.m_sCode;

                                foreach(AlarmHelper ah in sorting)
                                {
                                    sort.m_ListSetT.AddRange(ah.m_ListSetT);
                                    sort.m_ListClearT.AddRange(ah.m_ListClearT);
                                }
                                if(sort.m_ListSetT.Count > sort.m_ListClearT.Count)
                                {
                                    sort.m_ListClearT.Add(sort.m_ListSetT.Last().Date.AddHours(23).AddMinutes(59).AddSeconds(59));
                                }
                                if(sort.m_ListClearT.Count > sort.m_ListSetT.Count)
                                {
                                    sort.m_ListSetT.Add(sort.m_ListClearT.Last().Date);
                                }
                                m_listAlarm.Add(sort);
                                AlarmTemp.Add(sort);
                            }
                            r.Close();
                        }
                    }
                }
            }
        }
    }
}
