<UserControl x:Class="RootTools.ImageViewer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:convert="clr-namespace:ViewConverter"
             xmlns:obs="clr-namespace:nsSizeObserver"
             xmlns:behavior="clr-namespace:mousebehavior"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:marterial="http://materialdesigninxaml.net/winfx/xaml/themes"
              Cursor="{Binding p_MouseCursor}"
             mc:Ignorable="d"
             Height="338" Width="356"
             Background="White">
    <UserControl.Resources>
        <convert:ConverterVisibleProgress x:Key="ConverterVisibleProgresss" />
        <convert:ZoomConverter x:Key="ZoomConverters" />
    </UserControl.Resources>
    <Grid>
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="KeyDown">
                <i:InvokeCommandAction Command="{Binding KeyPressedDownCommand}" />
            </i:EventTrigger>
            <i:EventTrigger EventName="KeyUp">
                <i:InvokeCommandAction Command="{Binding KeyPressedUpCommand}" />
            </i:EventTrigger>
            <i:EventTrigger EventName="KeyDown">
                <ei:CallMethodAction TargetObject="{Binding}" MethodName="KeyDown"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>
        <Grid.InputBindings>
            <KeyBinding Key="Delete" Command="{Binding KeyDelCommand}"/>
            <KeyBinding Key="Up" Command="{Binding KeyUpCommand}" />
            <KeyBinding Key="Down" Command="{Binding KeyDownCommand}" />
            <KeyBinding Key="Left" Command="{Binding KeyLeftCommand}" />
            <KeyBinding Key="Right" Command="{Binding KeyRightCommand}" />
        </Grid.InputBindings>
      
        <Slider Panel.ZIndex="5" VerticalAlignment="Bottom" Width="200"  Height="20" Margin="0,0,0,10" Value="{Binding p_Zoom, Converter={StaticResource ZoomConverters}, Mode=TwoWay}" Minimum="1" Maximum="1000"
                SmallChange="10" LargeChange="100" Focusable="False">
            <Slider.Style>
                <Style>
                    <Style.Triggers>
                        <Trigger Property="Slider.IsMouseOver" Value="False">
                            <Setter Property="Slider.Opacity" Value="0.4"></Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Slider.Style>
        </Slider>
        <Grid Focusable="True">
        <Canvas Background="Black" obs:SizeObserver.Observe="true" Focusable="True"
                obs:SizeObserver.ObservedWidth="{Binding p_CanvasWidth, Mode=OneWayToSource}"
                obs:SizeObserver.ObservedHeight="{Binding p_CanvasHeight, Mode=OneWayToSource}">
            <Image Source="{Binding Path=p_ImgSource}"/>
            </Canvas>
            <ItemsControl ItemsSource="{Binding p_Element}" 
                          Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                          Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}"
                          Panel.ZIndex="5">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas ClipToBounds="True" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <ItemsControl ItemsSource="{Binding p_ViewerUIElement}"
                      Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                      Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}"
                      Panel.ZIndex="2" IsHitTestVisible="False">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas ClipToBounds="True" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <i:Interaction.Behaviors>
                <behavior:KeyBehaviour KeyEvent="{Binding KeyEvent, Mode=OneWayToSource}"/>
                <behavior:MouseBehaviour MouseEvent="{Binding MouseEvent, Mode=OneWayToSource}" />
                <behavior:MouseBehaviour MouseX="{Binding p_MouseX, Mode=OneWayToSource}"
                        MouseY="{Binding p_MouseY, Mode=OneWayToSource}" />
            </i:Interaction.Behaviors>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseLeftUp}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseMove">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseMove}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseRightButtonDown">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseRightDown}" />
                </i:EventTrigger>
				<i:EventTrigger EventName="MouseLeave">
					<i:InvokeCommandAction Command="{Binding CanvasMouseLeave}" />
				</i:EventTrigger>
				<i:EventTrigger EventName="MouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseLeftDown}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseDown">
                    <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseDown" />
				</i:EventTrigger>
				<i:EventTrigger EventName="MouseEnter">
					<ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseEnter" />
				</i:EventTrigger>
				<i:EventTrigger EventName="PreviewMouseWheel">
                    <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseWheel" />
                </i:EventTrigger>
                <i:EventTrigger EventName="Loaded" >
                    <i:InvokeCommandAction Command="{Binding LoadedCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            </Grid>
            <StackPanel HorizontalAlignment="Right" IsHitTestVisible="False">
            <WrapPanel Margin="3">
                <TextBlock Text="(X,Y) = "  Foreground="White"/>
                <TextBlock Text="{Binding p_MouseX}"
                           Foreground="White" />
                <TextBlock Text=", "
                           Foreground="White" />
                <TextBlock Text="{Binding p_MouseY}"
                           Foreground="White" />
            </WrapPanel>
            <WrapPanel Margin="3">
                <TextBlock Text="(Mem X,Y) = "
                           Foreground="White" />
                <TextBlock Text="{Binding p_MouseMemX}"
                           Foreground="White" />
                <TextBlock Text=", "
                           Foreground="White" />
                <TextBlock Text="{Binding p_MouseMemY}"
                           Foreground="White" />
            </WrapPanel>
            <WrapPanel Margin="3">
                <TextBlock Text="GV = "
                           Foreground="White" />
                <TextBlock Text="{Binding p_GV}"
                           Margin="0,0,70,0"
                           Foreground="White" />
                <TextBlock Text="Zoom = "
                           Foreground="White" />
                <TextBlock Text="{Binding p_Zoom, StringFormat=F3}"
                           Margin="0,0,70,0"
                           Foreground="White" />
            </WrapPanel>
            <!--<TextBlock Text="{Binding Test}"
                                       Background="#FF43437A"
                                           Margin="0,10,0,0"/>
                        <TextBlock Text="{Binding Test2}"
                                       Background="#FF43437A"
                                           Margin="0,10,0,0"/>-->
        </StackPanel>
        <ProgressBar Grid.Row="1" Value="{Binding p_nProgress}" Width="300" Height="35"
                Visibility="{Binding Path=p_nProgress, Converter= {StaticResource ConverterVisibleProgresss}}" />
        <Border VerticalAlignment="Center" HorizontalAlignment="Center" Width="200" Height="35"
                Visibility="{Binding Path=p_nProgress, Converter= {StaticResource ConverterVisibleProgresss}}">
            <TextBlock TextElement.Foreground="Black"
                    Text="{Binding Path = p_nProgress, StringFormat={}{0:0}%}"
                    TextAlignment="Center" FontSize="30"></TextBlock>
        </Border>
        <ToggleButton  Grid.Row="1" Width="100" Height="30" Margin="0,120,0,0" 
                Background="AliceBlue" 
                Command="{Binding CopyCancelCommand}"
                Visibility="{Binding Path=p_nProgress, Converter= {StaticResource ConverterVisibleProgresss}}">
            <Grid Margin="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30*"></ColumnDefinition>
                    <ColumnDefinition Width="90*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <marterial:PackIcon Kind="Cancel" Margin="0" Grid.Column="0"
                        VerticalAlignment="Center" HorizontalAlignment="Center" />
                <TextBlock Text="Cancel" Margin="0" Grid.Column="1"
                           Foreground="black"
                        VerticalAlignment="Center" HorizontalAlignment="Center" />
            </Grid>
        </ToggleButton>
    </Grid>
</UserControl>
