<UserControl x:Class="RootTools.Trees.TreeUI"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d"
        xmlns:local="clr-namespace:RootTools.Trees" 
        xmlns:PackIcon="http://metro.mahapps.com/winfx/xaml/iconpacks"
        SizeChanged="UserControl_SizeChanged"
        xmlns:convert="clr-namespace:ViewConverter" d:DesignHeight="500" 
              d:DesignWidth="500">
    <UserControl.Resources>
        <Color x:Key="BackgroundColor">#FFBEE6FD</Color>
        <Color x:Key="BorderColor">#FF707070</Color>
        <Color x:Key="ForegroundColor">#FF444444</Color>
        <Color x:Key="DisabledColor">#FFF4F4F4</Color>
        <Color x:Key="DisabledBorderColor">#FF888888</Color>
        <Color x:Key="DisabledForegroundColor">#FF888888</Color>
        <Color x:Key="MouseOverColor">#FFAFC3CF</Color>
        <Color x:Key="MouseOverBorderColor">#FF3C7FB1</Color>
        <Color x:Key="SelectedColor">#FFC4E5F6</Color>
        <Color x:Key="SelectedBorderColor">#FF2C628B</Color>
        <Color x:Key="InputBorderColor">#FFCCCCCC</Color>
        <Color x:Key="InputBackgroundColor">#FFFFFFFF</Color>
        <Color x:Key="DropDownBorderColor">#FFABADB3</Color>
        <Color x:Key="DropDownBackgroundColor">#FFFFFFFF</Color>
        <convert:TextBoxToIntConverter x:Key="TextBoxToIntConverters" />
        <convert:TextBoxToLongConverter x:Key="TextBoxToLongConverters" />
        <convert:TextBoxToDoubleConverter x:Key="TextBoxToDoubleConverters" />
        <convert:HeightToBoolConverter x:Key="HeightToBoolConverters" />
        <Style x:Key="ToggleButton.TreeExpander" TargetType="{x:Type ToggleButton}">
            <Setter Property="Margin"
                    Value="{Binding Level, RelativeSource={RelativeSource AncestorType={x:Type local:TreeListViewItem}}, Converter={x:Static convert:LevelToIndentConverter.Default}}" />
            <Setter Property="IsChecked"
                    Value="{Binding Path=IsExpanded, RelativeSource={RelativeSource AncestorType= {x:Type local:TreeListViewItem}}}" />
            <Setter Property="Focusable" Value="True" />
            <!--<Setter Property="ta" Value="True"></Setter>-->
            <Setter Property="Padding" Value="0,2" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="ArrowGrid" Grid.Column="0" Width="20">
                                    <ContentControl x:Name="Up_Arrow" VerticalAlignment="Center"
                                            HorizontalAlignment="Center" Focusable="True"
                                            IsTabStop="False">
                                        <PackIcon:PackIconBoxIcons Kind="RegularChevronUpCircle" Foreground="Red"></PackIcon:PackIconBoxIcons>
                                        <!--<TextBlock Text="+" />-->
                                    </ContentControl>
                                    <ContentControl x:Name="Down_Arrow" VerticalAlignment="Center"
                                            HorizontalAlignment="Center" Visibility="Collapsed"
                                            IsTabStop="False" Focusable="True">
                                        <PackIcon:PackIconBoxIcons Kind="RegularChevronDownCircle"></PackIcon:PackIconBoxIcons>
                                    </ContentControl>
                                    <ContentControl x:Name="None_Arrow" VerticalAlignment="Center"
                                            HorizontalAlignment="Center" Visibility="Hidden"
                                            IsTabStop="False" Focusable="True">
                                        <PackIcon:PackIconBoxIcons Kind="RegularBellMinus" Foreground="Gray"></PackIcon:PackIconBoxIcons>
                                    </ContentControl>
                                </Grid>
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="Stretch"
                                        RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                        VerticalAlignment="Center" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger
                                    Binding="{Binding Path=HasItems,RelativeSource={RelativeSource AncestorType={x:Type local:TreeListViewItem}}}"
                                    Value="False">
								<Setter TargetName="ArrowGrid" Property="Visibility" Value="Hidden" />
							</DataTrigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="Down_Arrow" Property="Visibility"
                                        Value="Visible" />
                                <Setter TargetName="Up_Arrow" Property="Visibility"
                                        Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeListViewScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollViewer">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="5" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="5" />
                            </Grid.RowDefinitions>
                            <DockPanel Margin="{TemplateBinding Padding}">
                                <ScrollViewer DockPanel.Dock="Top" Focusable="false"
                                        HorizontalScrollBarVisibility="Hidden"
                                        VerticalScrollBarVisibility="Hidden">
                                    <GridViewHeaderRowPresenter
                                            Columns="{Binding Path=TemplatedParent.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                                <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Local"
                                        CanContentScroll="{TemplateBinding CanContentScroll}"
                                        CanHorizontallyScroll="False" CanVerticallyScroll="False" />
                            </DockPanel>
                            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal"
                                    BorderThickness="0,1,0,0" Grid.Row="1" Grid.Column="0"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    Value="{TemplateBinding HorizontalOffset}"
                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0"
                                    BorderThickness="1,0,0,0"
                                    Maximum="{TemplateBinding ScrollableHeight}"
                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                    Value="{TemplateBinding VerticalOffset}"
                                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeListView.Base" TargetType="{x:Type local:TreeListView}">
            <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
            <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
            <Setter Property="VirtualizingPanel.ScrollUnit" Value="Item" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}">
                            <ScrollViewer Style="{StaticResource TreeListViewScrollViewerStyle}">
                                <Grid>
                                    <ItemsPresenter x:Name="ItemsPresenter" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeListViewItem.Base" TargetType="{x:Type local:TreeListViewItem}">
            <Style.Triggers>
                <Trigger Property="FrameworkElement.IsKeyboardFocusWithin" Value="True">
                    <Setter Property="IsSelected" Value="True" />
                </Trigger>
            </Style.Triggers>
            <Setter Property="IsExpanded" Value="{Binding p_bExpand}" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
            <Setter Property="IsTabStop" Value="True" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderThickness" Value="0,0,0,1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate x:Name="test22" TargetType="{x:Type local:TreeListViewItem}">
                        <VirtualizingStackPanel>
                            <Border Name="Bd" Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Height="{Binding p_bVisible, Converter={StaticResource HeightToBoolConverters}}"
                                    Padding="{TemplateBinding Padding}">
                                <GridViewRowPresenter x:Name="PART_Header"
                                        Height="{Binding p_bVisible, Converter={StaticResource HeightToBoolConverters}}"
                                        Content="{TemplateBinding Header}"
                                        Columns="{Binding Columns, RelativeSource={RelativeSource FindAncestor, AncestorType=local:TreeListView}}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" />
                        </VirtualizingStackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility"
                                        Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#FFECFAFF" />
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFE0E0E0" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasItems" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="#FFE3F6FE"></Setter>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="GridHeaderRight" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <GradientStop Offset="0.0" Color="#373638" />
                        <GradientStop Offset="1.0" Color="#77797B" />
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style BasedOn="{StaticResource TreeListView.Base}" TargetType="{x:Type local:TreeListView}" />
        <Style BasedOn="{StaticResource TreeListViewItem.Base}"
                TargetType="{x:Type local:TreeListViewItem}" />
        <Style x:Key="BorderChangeTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
            <Style.Triggers>
                <Trigger Property="TextBox.IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderThickness" Value="1" />
                </Trigger>
                <Trigger Property="TextBox.IsKeyboardFocusWithin" Value="False">
                    <Setter Property="BorderThickness" Value="0" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <!-- The border around the whole control (Text and button) -->
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="1" BorderThickness="1">
                    <Border.BorderBrush>
                        <SolidColorBrush Color="{DynamicResource BorderColor}"></SolidColorBrush>
                    </Border.BorderBrush>
                    <Border.Background>
                        <SolidColorBrush Color="{DynamicResource BackgroundColor}" />
                    </Border.Background>
                </Border>
                <!-- / end -->
                <!-- The Text of selected item -->
                <Border Name="Input" Grid.Column="0" CornerRadius="1,0,0,1" Margin="0"
                        BorderThickness="1,1,0,1">
                    <Border.Background>
                        <SolidColorBrush Color="{DynamicResource InputBackgroundColor}" />
                    </Border.Background>
                    <Border.BorderBrush>
                        <SolidColorBrush Color="{DynamicResource InputBorderColor}" />
                    </Border.BorderBrush>
                    <!-- This border gives a solid edge to the button -->
                    <Border Name="InputBorder" CornerRadius="1,0,0,1" Margin="0"
                            BorderThickness="0,0,1,0">
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource InputBackgroundColor}" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource BorderColor}" />
                        </Border.BorderBrush>
                    </Border>
                </Border>
                <!-- / end -->
                <!-- The little arrow icon -->
                <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center"
                        VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="{DynamicResource ForegroundColor}" />
                    </Path.Fill>
                </Path>
                <!-- / end -->
                <!-- Different button states -->
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource MouseOverColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource MouseOverBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="InputBorder">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource MouseOverBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource SelectedColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource SelectedBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="InputBorder">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource SelectedBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource DisabledColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Arrow">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource DisabledForegroundColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource DisabledBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="CheckStates">
                        <VisualState x:Name="Checked">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource SelectedColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="Border">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource SelectedBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                        Storyboard.TargetName="InputBorder">
                                    <EasingColorKeyFrame KeyTime="0"
                                            Value="{StaticResource SelectedBorderColor}" />
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Unchecked" />
                        <VisualState x:Name="Indeterminate" />
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <!-- / end -->
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False"
                    Background="{TemplateBinding Background}" />
        </ControlTemplate>
        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
                <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames
                                                    Storyboard.TargetName="PART_EditableTextBox"
                                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                                        Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames
                                                    Storyboard.TargetProperty="(UIElement.Visibility)"
                                                    Storyboard.TargetName="PART_EditableTextBox">
                                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames
                                                    Storyboard.TargetProperty="(UIElement.Visibility)"
                                                    Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <!-- / end -->
                            <!-- This is the button to expand / contract the 
              drop down list. Uses resource defined above -->
                            <ToggleButton x:Name="ToggleButton"
                                    Template="{StaticResource ComboBoxToggleButton}"
                                    Focusable="false" ClickMode="Press"
                                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!-- / end -->
                            <!-- This is the style for the text of the selected item -->
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    Margin="10,0,10,0" VerticalAlignment="Center"
                                    HorizontalAlignment="Left"></ContentPresenter>
                            <!-- / end -->
                            <!-- Displays the selected text when the combo box is disabled -->
                            <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}"
                                    Template="{StaticResource ComboBoxTextBox}"
                                    HorizontalAlignment="Left" VerticalAlignment="Center"
                                    Margin="10,0,10,0" Focusable="True" Background="Transparent"
                                    Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <!-- / end -->
                            <!-- This is the style and layout for the dropdown section -->
                            <Popup x:Name="Popup" Placement="Bottom"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    AllowsTransparency="True" Focusable="False"
                                    PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True"
                                        MinWidth="{TemplateBinding ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" BorderThickness="1"
                                            CornerRadius="1" Margin="0,2,0,0">
                                        <Border.BorderBrush>
                                            <SolidColorBrush
                                                    Color="{DynamicResource DropDownBorderColor}" />
                                        </Border.BorderBrush>
                                        <Border.Background>
                                            <SolidColorBrush
                                                    Color="{DynamicResource DropDownBackgroundColor}" />
                                        </Border.Background>
                                    </Border>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <!-- Stack Panel of options -->
                                        <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                        <!-- / end -->
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                            <!-- / end -->
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- If there aren't any items, then display 
             the popup with a height of 95 -->
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Border" BorderThickness="1" Padding="10,2,10,2"
                                SnapsToDevicePixels="true" Background="Transparent">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent" />
                            </Border.BorderBrush>
                            <VisualStateManager.VisualStateGroups>
                                <!--<VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames
                                                    Storyboard.TargetName="Border"
                                                    Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                                        Value="{StaticResource MouseOverColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames
                                                    Storyboard.TargetName="Border"
                                                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                                        Value="{StaticResource MouseOverBorderColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>-->
                                <VisualStateGroup x:Name="SelectionStates">
                                    <!-- When the item is selected, 
                 set the background and border colours -->
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames
                                                    Storyboard.TargetName="Border"
                                                    Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                                        Value="{StaticResource SelectedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames
                                                    Storyboard.TargetName="Border"
                                                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                                        Value="{StaticResource SelectedBorderColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <!-- / end -->
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="SelectedUnfocused" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <local:TreeListView HorizontalAlignment="Stretch" ItemsSource="{Binding p_aChild}"
                x:Name="ControlTree" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                PreviewMouseUp="ControlTree_PreviewMouseUp">
        <local:TreeListView.ItemTemplate>
            <HierarchicalDataTemplate ItemsSource="{Binding p_aChild}" />
        </local:TreeListView.ItemTemplate>
        <local:TreeListView.Columns>
            <GridViewColumn Header="Name" Width="120" x:Name="Column1"
                        HeaderContainerStyle="{StaticResource GridHeaderRight}">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <DataTemplate.Resources>
                            <DataTemplate DataType="{x:Type local:Tree}">
                                <TextBlock Text="{Binding p_sName}" ToolTip="{Binding p_sDescription}"/>
                            </DataTemplate>
                        </DataTemplate.Resources>
                        <ToggleButton Content="{Binding}" 
                                    Style="{StaticResource ToggleButton.TreeExpander}"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn Header="Value" x:Name="Column2" Width="240"
                        HeaderContainerStyle="{StaticResource GridHeaderRight}">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <DataTemplate.Resources>
                            <DataTemplate DataType="{x:Type local:Tree}"></DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeGroup}"></DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_bool}">
                                <ToggleButton IsChecked="{Binding p_value}"
                                            IsEnabled="{Binding p_bEnable}">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <TextBlock x:Name="tbBool"></TextBlock>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter TargetName="tbBool" Property="Text"
                                                                Value="TRUE" />
                                                </Trigger>
                                                <Trigger Property="IsChecked" Value="False">
                                                    <Setter TargetName="tbBool" Property="Text"
                                                                Value="FALSE" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_int}">
                                <TextBox Style="{StaticResource BorderChangeTextBox}"
                                         IsEnabled="{Binding p_bEnable}"
                                         Text="{Binding p_value, Converter={StaticResource TextBoxToIntConverters}}"
                                         GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                         PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_double}">
                                <TextBox IsEnabled="{Binding p_bEnable}"
                                         Text="{Binding p_value, Converter={StaticResource TextBoxToDoubleConverters}}"
                                         GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                         PreviewKeyDown="ToggleButton_PreviewKeyDown"
                                         Style="{StaticResource BorderChangeTextBox}" />
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_long}">
                                <TextBox IsEnabled="{Binding p_bEnable}"
                                         Text="{Binding p_value, Converter={StaticResource TextBoxToLongConverters}}"
                                         GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                         PreviewKeyDown="ToggleButton_PreviewKeyDown"
                                         Style="{StaticResource BorderChangeTextBox}" />
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_Password}">
                                <TextBox Text="{Binding p_value}"
                                         IsEnabled="{Binding p_bEnable}"
                                         Style="{StaticResource BorderChangeTextBox}"
                                         GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                         PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_FileName}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="30"></ColumnDefinition>
                                        <ColumnDefinition></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <Button Command="{Binding OpenFileCommand}" 
                                                IsEnabled="{Binding p_bEnable}">
                                        <Button.Template>
                                            <ControlTemplate>
                                                <Border BorderThickness="1" BorderBrush="Black"  Background="Transparent">
                                                    <PackIcon:PackIconBoxIcons Kind="RegularFileFind"
                                                                Width="{PriorityBinding}"
                                                                Height="{PriorityBinding}"
                                                                VerticalAlignment="Center"
                                                                HorizontalAlignment="Center"
                                                                Foreground="Black" />
                                                </Border>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>
                                    <TextBox Text="{Binding p_value}" Grid.Column="1"
                                             IsEnabled="{Binding p_bEnable}"
                                             Style="{StaticResource BorderChangeTextBox}"
                                             GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                             PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                                </Grid>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_FolderName}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="30"></ColumnDefinition>
                                        <ColumnDefinition></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <Button Command="{Binding OpenFolderCommand}" 
                                            IsEnabled="{Binding p_bEnable}">
                                        <Button.Template>
                                            <ControlTemplate>
                                                <Border BorderThickness="1" BorderBrush="Black" Background="Transparent">
                                                    <PackIcon:PackIconBoxIcons Kind="RegularFolderOpen"
                                                                Width="{PriorityBinding}"
                                                                Height="{PriorityBinding}"
                                                                VerticalAlignment="Center"
                                                                HorizontalAlignment="Center"
                                                                Foreground="Black" />
                                                </Border>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>
                                    <TextBox Text="{Binding p_value}" Grid.Column="1"
                                             IsEnabled="{Binding p_bEnable}"
                                             Style="{StaticResource BorderChangeTextBox}"
                                             GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                             PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                                </Grid>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_string}">
                                <TextBox Text="{Binding p_value}"
                                         IsEnabled="{Binding p_bEnable}"
                                         Style="{StaticResource BorderChangeTextBox}"
                                         GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                         PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_CPoint}">
                                <WrapPanel>
                                    <TextBlock Text=" ( "></TextBlock>
                                    <TextBox IsEnabled="{Binding p_bEnable}"
                                             Text="{Binding p_valueX, Converter= {StaticResource TextBoxToIntConverters}}"
                                             Style="{StaticResource BorderChangeTextBox}"
                                             GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                             PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                                    <!--<TextBlock Text=" Y : "></TextBlock>-->
                                    <TextBlock Text=" , "></TextBlock>
                                    <TextBox IsEnabled="{Binding p_bEnable}"
                                             Text="{Binding p_valueY, Converter= {StaticResource TextBoxToIntConverters}}"
                                             Style="{StaticResource BorderChangeTextBox}"
                                             GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                             PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                                    <TextBlock Text=" )"></TextBlock>
                                </WrapPanel>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_RPoint}">
                                <WrapPanel>
                                    <TextBlock Text=" ( "></TextBlock>
                                    <TextBox IsEnabled="{Binding p_bEnable}"
                                             Text="{Binding p_valueX, Converter= {StaticResource TextBoxToDoubleConverters}}"
                                             Style="{StaticResource BorderChangeTextBox}"
                                             GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                             PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                                    <TextBlock Text=" , "></TextBlock>
                                    <TextBox IsEnabled="{Binding p_bEnable}"
                                             Text="{Binding p_valueY, Converter= {StaticResource TextBoxToDoubleConverters}}"
                                             Style="{StaticResource BorderChangeTextBox}"
                                             GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                             PreviewKeyDown="ToggleButton_PreviewKeyDown" />
                                    <TextBlock Text=" )"></TextBlock>
                                </WrapPanel>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_stringList}">
                                <ComboBox SelectedValue="{Binding p_value}"
                                          IsEnabled="{Binding p_bEnable}"
                                          ItemsSource="{Binding p_list}" Foreground="Black"
                                          GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus"
                                          SelectionChanged="ComboBox_SelectionChanged"/>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type local:TreeItem_ICommand}">
                                <Button Command="{Binding p_value}"
                                            Content="{Binding p_sButtonName}"/>
                            </DataTemplate>
                        </DataTemplate.Resources>
                        <ContentPresenter Content="{Binding}" VerticalAlignment="Center" />
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <!--<GridViewColumn Header="" Width="1000"
                        HeaderContainerStyle="{StaticResource GridHeaderRight}">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <DataTemplate.Resources>
                                <DataTemplate DataType="{x:Type local:Tree}"></DataTemplate>
                            </DataTemplate.Resources>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>-->
        </local:TreeListView.Columns>
    </local:TreeListView>
</UserControl>
