<Window x:Class="Root_CAMELLIA.Dlg_RecipeManager"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
        xmlns:local="clr-namespace:Root_CAMELLIA"
        xmlns:Icon="clr-namespace:Root_CAMELLIA.Control.Icon"
        xmlns:cp="clr-namespace:ColorPickerLib.Controls;assembly=ColorPickerLib"
        xmlns:stage ="clr-namespace:Camellia2Stage"
        xmlns:data="clr-namespace:Root_CAMELLIA.Data"
        WindowStyle="None"
        ResizeMode="CanResize"
        WindowStartupLocation="CenterScreen"
        WindowState="Normal"
        Width="1820" Height="980"
        BorderBrush="Black" BorderThickness="1"
        Background="{StaticResource PanelBackGround}"
        mc:Ignorable="d">
    <Window.Resources>
        <local:ColorToBrushConverter x:Key="ColorToBrushConverter"/>
        <local:ImageConverter x:Key="ImageConverter"/>
        <local:PathConverter x:Key="PathConverter"/>
        <local:BoolConverter x:Key="BoolConverter"/>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <!--Title Bar-->
        <Grid Grid.Row="0"
              Name="TitleBar"
              Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
              MouseLeftButtonDown="TitleBar_MouseLeftButtonDown" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Icon:AtiLogo Width="30"
                          Height="21"
                          VerticalAlignment="Center"
                          Margin="2"/>
            <Grid Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Text="Camellia Ⅱ - Version 0.0.1"
                       FontSize="11"
                       Foreground="Black"
                       VerticalAlignment="Center"
                       Margin="5,0,0,0"
                       Grid.Column="0" />
                <TextBlock Text="{Binding RecipePath}"
                       FontSize="11"
                       Foreground="Black"
                       VerticalAlignment="Center"
                       Margin="5,0,0,0"
                       Grid.Column="1" />
            </Grid>
            <TextBlock Text="RECIPE MANGER"
                       FontSize="14"
                       FontWeight="Bold"
                       Foreground="Black"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Margin="5,0,0,0"
                       Grid.Column="1" />
            <StackPanel WindowChrome.IsHitTestVisibleInChrome="True"
                        Orientation="Horizontal"
                        Grid.Column="2">
                <Button Style="{StaticResource SystemButton}"
                        x:Name="CloseButton"
                        Width="30"
                        Height="25"
                        Margin="2,0,0,0"
                        VerticalAlignment="Bottom"
                        Command="{Binding CmdClose}">
                    <Path Style="{StaticResource CloseIconKey}" />
                </Button>
            </StackPanel>
        </Grid>
        <!--Menu-->
        <Menu Grid.Row="1" Background="{DynamicResource ControlBackGround}" Grid.ColumnSpan="2"
              Height="25">
            <MenuItem x:Name="RecipeNew" Header="New"  Height="25" Command="{Binding CmdRecipeNew}"/>
            <MenuItem x:Name="RecipeOpen" Header="Open" Command="{Binding CmdRecipeOpen}"/>
            <MenuItem x:Name="RecipeSave" Header="Save" Command="{Binding CmdRecipeSave}"/>
            <MenuItem x:Name="RecipeSaveAs" Header="Save As" Command="{Binding CmdRecipeSaveAs}"/>
        </Menu>

        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="4.5*"/>
                <ColumnDefinition Width="2.5*"/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <!--<RowDefinition Height="1*"/>-->
                    <RowDefinition Height="1.5*"/>
                    <RowDefinition Height="0.6*"/>
                    <RowDefinition Height="5*"/>
                    <RowDefinition Height="2*"/>
                    <RowDefinition Height="1.3*"/>
                </Grid.RowDefinitions>
                <!--<GroupBox Header="Mode">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <ToggleButton Content="Hole" Margin="5"/>
                        <ToggleButton Content="Die" Grid.Column="1" Margin="5"/>
                    </Grid>
                </GroupBox>-->
                <GroupBox Header="Preset" Grid.Row="0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Button Content="13 Point" Grid.Column="0" Grid.Row="0" Margin="5" Command="{Binding Cmd13Point}"/>
                        <Button Content="25 Point"  Grid.Column="1" Grid.Row="0" Margin="5" Command="{Binding Cmd25Point}"/>
                        <Button Content="49 Point" Grid.Column="0" Grid.Row="1" Margin="5" Command="{Binding Cmd49Point}"/>
                        <Button Content="73 Point"  Grid.Column="1" Grid.Row="1" Margin="5" Command="{Binding Cmd73Point}"/>
                    </Grid>
                </GroupBox>
                <GroupBox Header="Select Using Measurement" Grid.Row="1">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid Grid.Column="0" Background="Gainsboro" Margin="3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="Use Thickness Measurement" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                            <ToggleButton Grid.Column="1" Style="{StaticResource CustomToggleButton}" IsChecked="{Binding p_UseThickness, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                        <Grid Grid.Column="1" Background="Gainsboro" Margin="3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="Use Transmittance Measurement" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                            <ToggleButton Grid.Column="1" Style="{StaticResource CustomToggleButton}" IsChecked="{Binding p_UseTransmittance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                    </Grid>
                </GroupBox>
                <GroupBox Header="Measurement Parameter" Grid.Row="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1.3*"/>
                            <RowDefinition Height="1.0*"/>
                            <RowDefinition Height="0.3*"/>
                        </Grid.RowDefinitions>
                        <DataGrid Margin="2" AutoGenerateColumns="False" CanUserAddRows="False" CanUserSortColumns="False" EnableColumnVirtualization="True" CanUserDeleteRows="False"
                                  EnableRowVirtualization="True" ScrollViewer.CanContentScroll="True" SelectionMode="Single" ItemsSource="{Binding GridLayerData}"
                                  SelectedIndex="{Binding GridLayerIndex}" IsEnabled="{Binding p_UseThickness}">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="" Width="40" Binding="{Binding LayerHeader}" IsReadOnly="True" Foreground="Blue" FontWeight="ExtraBold"/>
                                <DataGridComboBoxColumn Width="*" SelectedValueBinding="{Binding SelectedHost1, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name" SelectedValuePath="FullPath">
                                    <DataGridComboBoxColumn.Header>
                                        <TextBlock Text="Host" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridComboBoxColumn.Header>
                                    <DataGridComboBoxColumn.ElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Host1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Setter Property="IsReadOnly" Value="True"/>
                                        </Style>
                                    </DataGridComboBoxColumn.ElementStyle>
                                    <DataGridComboBoxColumn.EditingElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Host1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        </Style>
                                    </DataGridComboBoxColumn.EditingElementStyle>
                                </DataGridComboBoxColumn>
                                <DataGridComboBoxColumn Width="*"  SelectedValueBinding="{Binding SelectedGuest1, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name" SelectedValuePath="FullPath">
                                    <DataGridComboBoxColumn.Header>
                                        <TextBlock Text="Guest1" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridComboBoxColumn.Header>
                                    <DataGridComboBoxColumn.ElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Guest1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Setter Property="IsReadOnly" Value="True"/>
                                        </Style>
                                    </DataGridComboBoxColumn.ElementStyle>
                                    <DataGridComboBoxColumn.EditingElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Guest1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        </Style>
                                    </DataGridComboBoxColumn.EditingElementStyle>
                                </DataGridComboBoxColumn>
                                <DataGridTextColumn Width="50" Binding="{Binding Fv1, StringFormat=N3, UpdateSourceTrigger=LostFocus, Mode=TwoWay}">
                                    <DataGridTextColumn.Header>
                                        <TextBlock Text="fv1" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>
                                <DataGridCheckBoxColumn Width="25" Binding="{Binding Fv1Fit, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                    <DataGridCheckBoxColumn.Header>
                                        <TextBlock Text="fit" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridCheckBoxColumn.Header>
                                </DataGridCheckBoxColumn>
                                <DataGridComboBoxColumn Width="*"  SelectedValueBinding="{Binding SelectedGuest2, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name" SelectedValuePath="FullPath">
                                    <DataGridComboBoxColumn.Header>
                                        <TextBlock Text="Guest2" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridComboBoxColumn.Header>
                                    <DataGridComboBoxColumn.ElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Guest2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Setter Property="IsReadOnly" Value="True"/>
                                        </Style>
                                    </DataGridComboBoxColumn.ElementStyle>
                                    <DataGridComboBoxColumn.EditingElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Guest2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        </Style>
                                    </DataGridComboBoxColumn.EditingElementStyle>
                                </DataGridComboBoxColumn>
                                <DataGridTextColumn Width="50" Binding="{Binding Fv2, StringFormat=N3, UpdateSourceTrigger=LostFocus, Mode=TwoWay}">
                                    <DataGridTextColumn.Header>
                                        <TextBlock Text="fv2" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>
                                <DataGridCheckBoxColumn Width="25" Binding="{Binding Fv2Fit, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                    <DataGridCheckBoxColumn.Header>
                                        <TextBlock Text="fit" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridCheckBoxColumn.Header>
                                </DataGridCheckBoxColumn>
                                <DataGridTextColumn Width="50" Binding="{Binding Thickness, StringFormat=N2, UpdateSourceTrigger=LostFocus, Mode=TwoWay}">
                                    <DataGridTextColumn.Header>
                                        <TextBlock Text="Thick." Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>
                                <DataGridCheckBoxColumn Width="25" Binding="{Binding ThicknessFit, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                    <DataGridCheckBoxColumn.Header>
                                        <TextBlock Text="fit" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridCheckBoxColumn.Header>
                                </DataGridCheckBoxColumn>
                                
                                <DataGridComboBoxColumn Width="*" SelectedValueBinding="{Binding SelectedEmm, UpdateSourceTrigger=PropertyChanged}">
                                    <DataGridComboBoxColumn.Header>
                                        <TextBlock Text="Emm" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridComboBoxColumn.Header>
                                    <DataGridComboBoxColumn.ElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Emm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Setter Property="IsReadOnly" Value="True"/>
                                        </Style>
                                    </DataGridComboBoxColumn.ElementStyle>
                                    <DataGridComboBoxColumn.EditingElementStyle>
                                        <Style TargetType="ComboBox">
                                            <Setter Property="ItemsSource" Value="{Binding Emm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        </Style>
                                    </DataGridComboBoxColumn.EditingElementStyle>
                                </DataGridComboBoxColumn>
                                <DataGridTextColumn Width="50" Binding="{Binding Scale, StringFormat=N3, UpdateSourceTrigger=LostFocus, Mode=TwoWay}">
                                    <DataGridTextColumn.Header>
                                        <TextBlock Text="Scale" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>
                                <DataGridTextColumn Width="50" Binding="{Binding Offset, StringFormat=N3, UpdateSourceTrigger=LostFocus, Mode=TwoWay}">
                                    <DataGridTextColumn.Header>
                                        <TextBlock Text="Offset" Style="{StaticResource GridHeaderStyle}" />
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                        <Grid Grid.Row="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="15"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <TextBlock Text="Material" VerticalAlignment="Bottom" Margin="5,0"/>
                            <Grid Grid.Row="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="23*"/>
                                    <ColumnDefinition Width="185*"/>
                                    <ColumnDefinition Width="105*"/>
                                    <ColumnDefinition Width="216*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="30"/>
                                </Grid.RowDefinitions>
                                <ListView SelectionMode="Single" x:Name="MaterialListView" ItemsSource="{Binding MaterialListItem}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Margin="2" Grid.RowSpan="2" Grid.ColumnSpan="2" SelectedIndex="{Binding MaterialSelectIndex}" >
                                    <ListView.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel/>
                                        </ItemsPanelTemplate>
                                    </ListView.ItemsPanel>
                                    <ListView.ItemTemplate>
                                        <DataTemplate>
                                            <DockPanel Background="Transparent">
                                                <TextBlock Width="50" DockPanel.Dock="Bottom" Text="{Binding Converter={StaticResource PathConverter}}" TextWrapping="Wrap" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                <Image Width="30" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{Binding Converter={StaticResource ImageConverter}}" RenderTransformOrigin="0.5, 0.5"></Image>
                                            </DockPanel>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="ListViewItem">
                                            <Setter Property="Margin" Value="5,5,5,5"/>
                                            <Setter Property="Padding" Value="0,0,0,0"/>
                                            <Setter Property="HorizontalAlignment" Value="Left"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate  TargetType="{x:Type ListViewItem}">
                                                        <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Height="Auto" >
                                                            <Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerRadius="1.5" BorderThickness="1" Visibility="Collapsed">
                                                                <Border.BorderBrush>
                                                                    <VisualBrush>
                                                                        <VisualBrush.Visual>
                                                                            <Rectangle StrokeDashArray="1.0 1.0" Stroke="#FF0000FF" RadiusX="1.5" RadiusY="1.5" Width="30" Height="45"/>
                                                                        </VisualBrush.Visual>
                                                                    </VisualBrush>
                                                                </Border.BorderBrush>
                                                            </Border>
                                                            <StackPanel HorizontalAlignment="Stretch"  VerticalAlignment="Stretch">
                                                                <ContentPresenter/>
                                                            </StackPanel>
                                                            <Rectangle Name="UpperHighlight" Visibility="Collapsed" Fill="#00FFFFFF" />
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsSelected" Value="True">
                                                                <Setter TargetName="border" Property="Visibility" Value="Visible"/>
                                                                <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
                                                                <Setter TargetName="UpperHighlight" Property="Fill" Value="#400000FF" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonDown">
                                            <i:CallMethodAction TargetObject="{Binding Path=DataContext, ElementName=MaterialListView, Mode=OneWay}" MethodName="OnListViewMouseButtonDown" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ListView>
                                <UniformGrid Grid.Column="2" Columns="1" Rows="2">
                                    <Button Content="Add material"  Margin="7" Command="{Binding CmdAddMaterial}" IsEnabled="{Binding p_UseThickness}"/>
                                    <Button Content="Delete material" Margin="7" Command="{Binding CmdDeleteMaterial}" IsEnabled="{Binding p_UseThickness}"/>
                                </UniformGrid>
                                <UniformGrid Grid.Column="3" Columns="2" Rows="2" Margin="2">
                                    <Button Content="Insert Layer" Margin="5" Command="{Binding CmdInsertLayer}" IsEnabled="{Binding p_UseThickness}"/>
                                    <Button Content="Delete Layer" Margin="5" Command="{Binding CmdDeleteLayer}" IsEnabled="{Binding p_UseThickness}"/>
                                    <Button Content="Open Model" Margin="5" Command="{Binding CmdOpenModel}" IsEnabled="{Binding p_UseThickness}"/>
                                    <Button Content="Save Model" Margin="5" Command="{Binding CmdSaveModel}" IsEnabled="{Binding p_UseThickness}"/>
                                </UniformGrid>
                                <TextBlock Text="Model File" Grid.Row="1" Grid.Column="2" VerticalAlignment="Center"
                                           HorizontalAlignment="Center" Height="14" Width="Auto" Margin="8,8,42,8"/>
                                <TextBox Grid.Row="1" Grid.Column="2" TextAlignment="Center" VerticalContentAlignment="Center" IsReadOnly="True" IsReadOnlyCaretVisible="True" Margin="70,2,2,2" Grid.ColumnSpan="2" Text="{Binding ModelPath}" IsEnabled="{Binding p_UseThickness}"/>
                            </Grid>
                        </Grid>
                        <UniformGrid Columns="2" Grid.Row="3">
                            <Grid Margin="5" Background="Gainsboro">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="12*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Integration Time (VIS)" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                <TextBox Grid.Column="1" Margin="3" Text="{Binding VISIntegrationTime, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" TextAlignment="Center" VerticalContentAlignment="Center"></TextBox>
                            </Grid>
                            <Grid Margin="5" Background="Gainsboro">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="12*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Integration Time (NIR)" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                <TextBox Grid.Column="1" Margin="3" Text="{Binding NIRIntegrationTime, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" TextAlignment="Center" VerticalContentAlignment="Center"  IsEnabled="{Binding p_SettingViewModel.p_ExceptNIR, Converter={StaticResource BoolConverter}}" />
                            </Grid>
                        </UniformGrid>
                    </Grid>
                </GroupBox>
                <GroupBox Header="Wavelength Data" Grid.Row="3">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid Margin="5">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.18*"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Border Background="White" BorderBrush="#ABADB3" BorderThickness="1">
                                        <TextBlock Grid.Row="0" Text="Reflectance" TextAlignment="Center" Margin="0,2"/>
                                    </Border>
                                </Grid>
                                <DataGrid Grid.Row="1" ItemsSource="{Binding ReflectanceListItem}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserSortColumns="True" EnableColumnVirtualization="True"  CanUserDeleteRows="False"
                                  EnableRowVirtualization="True" ScrollViewer.CanContentScroll="True" SelectionMode="Single" SelectedIndex="{Binding ReflectanceSelectedIndex}">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Wave" Width="*" Binding="{Binding p_waveLength}" IsReadOnly="True"/>
                                        <DataGridTextColumn Header="Scale" Width="*" Binding="{Binding p_scale}" IsReadOnly="True"/>
                                        <DataGridTextColumn Header="Offset" Width="*" Binding="{Binding p_offset}" IsReadOnly="True"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Grid>
                        <Grid Grid.Column="1" Margin="5">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.15*"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Background="White" BorderBrush="#ABADB3" BorderThickness="1">
                                    <TextBlock Grid.Row="0" Text="Transmittance" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,2"/>
                                </Border>
                                <ListBox Grid.Row="1" ItemsSource="{Binding TransmittanceListItem, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" IsSynchronizedWithCurrentItem="True" HorizontalContentAlignment="Center"
                                         SelectedIndex="{Binding TransmittanceSelectedIndex}" IsEnabled="{Binding p_UseTransmittance}"/>
                            </Grid>
                        </Grid>
                        <Grid Grid.Column="2" Margin="5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2*"/>
                                <RowDefinition Height="3*"/>
                                <RowDefinition Height="2* "/>
                            </Grid.RowDefinitions>
                            <UniformGrid Rows="2" Columns="1">
                                <RadioButton Content="Reflectance" VerticalAlignment="Center" IsChecked="{Binding IsReflectanceCheck}"/>
                                <RadioButton Content="Transmittance" VerticalAlignment="Center" IsChecked="{Binding IsTransmittanceCheck}" IsEnabled="{Binding p_UseTransmittance}"/>
                            </UniformGrid>
                            <Grid Grid.Row="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                    <Grid Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="4*"/>
                                            <ColumnDefinition Width="2*"/>
                                            <ColumnDefinition Width="2*"/>
                                     </Grid.ColumnDefinitions>
                                    <TextBlock Text="Wavelength" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                     <TextBlock Text="Scale" VerticalAlignment="Center" HorizontalAlignment="Center"  Grid.Column="1"/>
                                    <TextBlock Text="Offset" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="2"/>
                                    </Grid>
                                    <Grid Grid.Row="1">
                                        <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="4*"/>
                                        <ColumnDefinition Width="2*"/>
                                        <ColumnDefinition Width="2*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBox local:FocusExtension.IsFocused="{Binding MyIsFocused, UpdateSourceTrigger=PropertyChanged}" Text="{Binding WaveLengthValue, UpdateSourceTrigger=LostFocus, StringFormat=N2}" TextAlignment="Center" VerticalContentAlignment="Center" Margin="2" Grid.Column="0"/>
                                    <TextBox local:FocusExtension.IsFocused="{Binding MyIsFocused, UpdateSourceTrigger=PropertyChanged}" Text="{Binding WaveLengthScale, UpdateSourceTrigger=LostFocus, StringFormat=N2}" TextAlignment="Center" VerticalContentAlignment="Center" Margin="2" Grid.Column="1"/>
                                    <TextBox local:FocusExtension.IsFocused="{Binding MyIsFocused, UpdateSourceTrigger=PropertyChanged}" Text="{Binding WaveLengthOffset, UpdateSourceTrigger=LostFocus, StringFormat=N2}" TextAlignment="Center" VerticalContentAlignment="Center" Margin="2" Grid.Column="2"/>
                            
                                    </Grid>
                                </Grid>
                            <UniformGrid Rows="1" Columns="2" Grid.Row="2">
                                <Button Content="Add" Margin="0,5,2,5" Command="{Binding CmdAddWaveLength}"/>
                                <Button Content="Delete" Margin="2,5,1,5" Command="{Binding CmdDeleteWaveLength}"/>
                            </UniformGrid>
                        </Grid>
                    </Grid>
                </GroupBox>
                <GroupBox Header="Thickness Parameter" Grid.Row="4">
                    <Grid>
                        <UniformGrid Columns="2" Rows="2">
                            <Grid Margin="5" Background="Gainsboro">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="12*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Lower WaveLength" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                <TextBox Grid.Column="1" Margin="3" Text="{Binding LowerWaveLength, UpdateSourceTrigger=LostFocus, Mode=TwoWay, StringFormat=N2}" TextAlignment="Center" VerticalContentAlignment="Center"
                                         IsEnabled="{Binding p_UseThickness}"></TextBox>
                            </Grid>
                            <Grid Margin="5" Background="Gainsboro">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="12*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Upper WaveLength" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                <TextBox Grid.Column="1" Margin="3" Text="{Binding UpperWaveLength, UpdateSourceTrigger=LostFocus, Mode=TwoWay, StringFormat=N2}" TextAlignment="Center" VerticalContentAlignment="Center"
                                         IsEnabled="{Binding p_UseThickness}"></TextBox>
                            </Grid>
                            <Grid Margin="5" Background="Gainsboro">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="12*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Thickness LM Iteration" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                <TextBox Grid.Column="1" Margin="3" Text="{Binding ThicknessLMIteration, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" TextAlignment="Center" VerticalContentAlignment="Center"
                                         IsEnabled="{Binding p_UseThickness}"></TextBox>
                            </Grid>
                            <Grid Margin="5" Background="Gainsboro">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18*"/>
                                    <ColumnDefinition Width="12*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Damping Factor" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="0"/>
                                <TextBox Grid.Column="1" Margin="3" Text="{Binding DampingFactor, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, StringFormat=N1}" TextAlignment="Center" VerticalContentAlignment="Center"
                                         IsEnabled="{Binding p_UseThickness}"></TextBox>
                            </Grid>
                        </UniformGrid>
                    </Grid>
                </GroupBox>
            </Grid>

            <GroupBox Header="Point Editor" Grid.Column="1">
                <Grid Margin="0,5,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="60"/>
                        <RowDefinition/>
                        <RowDefinition Height="60"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <GroupBox Header="Point Setting">
                            <UniformGrid Columns="4" Rows="1">
                                <Button Content="Reset" Margin="5" Command="{Binding CmdReset}"/>
                                <Button Content="Preset 1" Margin="5" Command="{Binding CmdPreset1}"/>
                                <Button Content="Preset 2" Margin="5" Command="{Binding CmdPreset2}" />
                            </UniformGrid>
                        </GroupBox>
                        <GroupBox Header="Point Selector" Grid.Column="1">
                            <UniformGrid Columns="4" Rows="1">
                                <TextBox Text="{Binding Percentage}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="5"/>
                                <Button Content="Select %" Margin="5" Command="{Binding CmdSelectPercentage}"/>
                                <Button Content="Select All" Margin="5" Command="{Binding CmdSelectAll}"/>
                                <Button Content="Delete All" Margin="5" Command="{Binding CmdDeleteAll}"/>
                            </UniformGrid>
                        </GroupBox>
                    </Grid>
                    <Grid Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid>
                            <!--<Viewbox Margin="10" Width="auto" Grid.Row="0">
                                <stage:CamelliaStage DataContext="{Binding CamelliaStage}"/>
                            </Viewbox>
                            <Viewbox Margin="10" Width="auto" Grid.Row="0">
                                <ItemsControl ItemsSource="{Binding p_DrawPointElement}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}" BorderBrush="Black" BorderThickness="1">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas ClipToBounds="True"  Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Viewbox>
                            <Viewbox Margin="10" Width="auto" Grid.Row="0" Panel.ZIndex="99">
                                <Canvas ClipToBounds="True"  Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}" Background="#01FFfFFF" Focusable="True">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseMove">
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseMove" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseWheel" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseWheel" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeftButtonDown" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeftButtonDown" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeftButtonUp" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeftButtonUp" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseRightButtonDown" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseRightButtonDown" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseRightButtonUp" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseRightButtonUp" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseEnter" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseEnter" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeave" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeave" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="KeyDown" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnCanvasKeyDown" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="KeyUp" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnCanvasKeyUp" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Canvas>
                            </Viewbox>-->
                            <Viewbox Margin="10" Width="auto" Grid.Row="0">
                                <ItemsControl ItemsSource="{Binding p_DrawElement}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}" BorderBrush="Black" BorderThickness="1">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas ClipToBounds="True"  Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}">
                                            </Canvas>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Viewbox>
                            <Viewbox Margin="10" Width="auto" Grid.Row="0">
                                <ItemsControl ItemsSource="{Binding p_DrawPointElement}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}" BorderBrush="Black" BorderThickness="1">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas ClipToBounds="True"  Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}">
                                            </Canvas>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Viewbox>
                            <Viewbox Margin="10" Width="auto" Grid.Row="0">
                                <ItemsControl ItemsSource="{Binding p_DrawSelectElement}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}" BorderBrush="Black" BorderThickness="1">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas ClipToBounds="True"  Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Viewbox>
                            <Viewbox Margin="10" Width="auto" Grid.Row="0" Panel.ZIndex="99">
                                <Canvas ClipToBounds="True"  Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}" Background="#01FFfFFF" Focusable="True">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseMove">
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseMove" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseWheel" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseWheel" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeftButtonDown" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeftButtonDown" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeftButtonUp" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeftButtonUp" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseRightButtonDown" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseRightButtonDown" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseRightButtonUp" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseRightButtonUp" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseEnter" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseEnter" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeave" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeave" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="KeyDown" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnCanvasKeyDown" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="KeyUp" >
                                            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnCanvasKeyUp" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Canvas>
                            </Viewbox>
                        </Grid>
                    </Grid>
                    <Grid Grid.Row="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <GroupBox Header="Tool Plus">
                            <UniformGrid Columns="4">
                                <Button Margin="5" x:Name="LockBtn" Content="{Binding LockState}" Background="{Binding LockBrush}" Command="{Binding CmdUILock}"/>
                                <Button Margin="5" x:Name="ShowBtn" Content="ShowIndex" Background="{Binding ShowIndexBrush}" Command="{Binding CmdShowIndex}"/>
                            </UniformGrid>
                        </GroupBox>
                        <GroupBox Header="Key State" Grid.Column="1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <UniformGrid Columns="3" Grid.Column="0">
                                    <Border Margin="5" BorderThickness="1" Background="{Binding ShiftBrush}" BorderBrush="Black">
                                        <TextBlock Text="Shift" VerticalAlignment="Center" HorizontalAlignment="Center"></TextBlock>
                                    </Border>
                                    <Border Margin="5" BorderThickness="1" Background="{Binding CtrlBrush}" BorderBrush="Black">
                                        <TextBlock Text="Ctrl" VerticalAlignment="Center" HorizontalAlignment="Center"></TextBlock>
                                    </Border>
                                    <Border Margin="5" BorderThickness="1" Background="{Binding SBrush}" BorderBrush="Black">
                                        <TextBlock Text="S" VerticalAlignment="Center" HorizontalAlignment="Center"></TextBlock>
                                    </Border>
                                </UniformGrid>
                                <Border Grid.Column="1" BorderThickness="1" Background="AliceBlue"  BorderBrush="Black">
                                    <TextBlock Text="{Binding PointAddMode}" VerticalAlignment="Center" HorizontalAlignment="Center"></TextBlock>
                                </Border>
                            </Grid>
                        </GroupBox>
                    </Grid>

                </Grid>
            </GroupBox>
            <Grid Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="142*"/>
                    <RowDefinition Height="272*"/>
                    <RowDefinition Height="103*"/>
                    <RowDefinition Height="413*"/>
                </Grid.RowDefinitions>
                <GroupBox Header="Measurement Point List" Grid.RowSpan="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="7*"/>
                            <RowDefinition Height="2*"/>
                        </Grid.RowDefinitions>
                        <UniformGrid Grid.Row="0" Margin="2" Background="Gainsboro" Columns="3">
                            <TextBlock Text="Count" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text=":" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                            <TextBlock Text="{Binding PointCount}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                        </UniformGrid>
                        <DataGrid Grid.Row="1" ItemsSource="{Binding PointListItem}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserSortColumns="True" EnableColumnVirtualization="True"  CanUserDeleteRows="False"
                                  EnableRowVirtualization="True" ScrollViewer.CanContentScroll="True" SelectionMode="Single">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Index" Width="*" Binding="{Binding ListIndex}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="X (mm)" Width="*" Binding="{Binding ListX}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="Y (mm)" Width="*" Binding="{Binding ListY}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="Route" Width="*" Binding="{Binding ListRoute}" IsReadOnly="True"/>
                            </DataGrid.Columns>
                        </DataGrid>
                        <Grid Grid.Row="2" Grid.Column="3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Button Grid.Column="0" Grid.RowSpan="2" Content="Reorder Route" Margin="5" Command="{Binding CmdReorderPoint}" Background="{Binding ReorderBrush}" />
                            <Button Grid.Column="1" Grid.RowSpan="2" Margin="5" Command="{Binding CmdRouteOptimizaion}">
                                <TextBlock TextAlignment="Center">Find Nearest<LineBreak/>Next Point</TextBlock>
                            </Button>

                            <Grid Grid.Column="2" Grid.RowSpan="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Margin="5" Background="#FFDDDDDD"
                                    BorderBrush="#FF707070" BorderThickness="1" Grid.ColumnSpan="2">
                                    <CheckBox x:Name="checkRoot" Content="Show Route" 
                                             VerticalAlignment="Center"
                                             HorizontalAlignment="Center" IsChecked="{Binding ShowRoute}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Checked" >
                                                <i:CallMethodAction TargetObject="{Binding Path=DataContext,ElementName=checkRoot, Mode=OneWay}" MethodName="OnCheckboxChange" />
                                            </i:EventTrigger>
                                            <i:EventTrigger EventName="Unchecked" >
                                                <i:CallMethodAction TargetObject="{Binding Path=DataContext,ElementName=checkRoot, Mode=OneWay}" MethodName="OnCheckboxChange" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </CheckBox>
                                </Border>
                                <UniformGrid Grid.Row="1" Grid.ColumnSpan="2" Rows="1" Columns="3">
                                    <cp:ColorPicker x:Name="colorPicker" DisplayColorAndName="False" Margin="5" AvailableColorsSortingMode="HueSaturationBrightness" ColorMode="ColorCanvas"
                                                      SelectedColor="{Binding RouteBrush, Mode=TwoWay, Converter={StaticResource ColorToBrushConverter}, UpdateSourceTrigger=PropertyChanged}" Resources="{StaticResource theme}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectedColorChanged" >
                                                <i:CallMethodAction TargetObject="{Binding Path=DataContext,ElementName=colorPicker, Mode=OneWay}" MethodName="ColorPicker_SelectedColorChanged" />
                                            </i:EventTrigger>
                                            <i:EventTrigger EventName="GotFocus" >
                                                <i:CallMethodAction TargetObject="{Binding Path=DataContext,ElementName=colorPicker, Mode=OneWay}" MethodName="colorPicker_Opened" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </cp:ColorPicker>
                                    <TextBlock Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center" Text="Thick"/>
                                    <TextBox x:Name="thicknessTextBox" Text="{Binding RouteThickness, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Grid.Row="1" Grid.Column="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextAlignment="Center" VerticalContentAlignment="Center" Margin="5">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="TextChanged" >
                                                <i:CallMethodAction TargetObject="{Binding Path=DataContext,ElementName=thicknessTextBox, Mode=OneWay}" MethodName="OnThicknessChanged" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </UniformGrid>
                            </Grid>
                        </Grid>
                    </Grid>
                </GroupBox>
                <GroupBox Header="Position Information" Grid.Row="2">
                    <UniformGrid Columns="2" Rows="2">
                        <Grid Margin="5" Background="Gainsboro">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="11*"/>
                                <ColumnDefinition Width="6*"/>
                                <ColumnDefinition Width="12*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="X" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="1"/>
                            <TextBlock Text=":" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="2"/>
                            <TextBlock Text="{Binding XPosition}" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="3"/>
                        </Grid>
                        <Grid Margin="5" Background="Gainsboro">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="2*"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="2*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="Y" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text=":" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="1"/>
                            <TextBlock Text="{Binding YPosition}" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="2"/>
                        </Grid>
                        <Grid Margin="5" Background="Gainsboro">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="2*"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="2*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="R" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text=":" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="1"/>
                            <TextBlock Text="{Binding CurrentRadius}" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="2"/>
                        </Grid>
                        <Grid Margin="5" Background="Gainsboro">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="2*"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="2*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="∠" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text=":" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="1"/>
                            <TextBlock Text="{Binding CurrentTheta}" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="2"/>
                        </Grid>
                    </UniformGrid>
                </GroupBox>

                <Grid Grid.Row="3">
                    <GroupBox Header="PreView">
                        <!--<stage:CamelliaStage></stage:CamelliaStage>-->
                        <Viewbox Margin="10">
                            <ItemsControl ItemsSource="{Binding p_PreviewDrawElement}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}" BorderBrush="Black" BorderThickness="1">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas x:Name="StagePreView" Width="{x:Static local:BaseDefine.CanvasWidth}" Height="{x:Static local:BaseDefine.CanvasHeight}" ClipToBounds="True" Background="#01FFFFFF">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="MouseMove">
                                                    <i:CallMethodAction TargetObject="{Binding Path=DataContext, ElementName=StagePreView, Mode=OneWay}" MethodName="OnMouseMovePreView" />
                                                </i:EventTrigger>
                                                <i:EventTrigger EventName="MouseWheel" >
                                                    <i:CallMethodAction TargetObject="{Binding Path=DataContext, ElementName=StagePreView, Mode=OneWay}" MethodName="OnMouseWheelPreView" />
                                                </i:EventTrigger>
                                                <i:EventTrigger EventName="MouseLeftButtonDown" >
                                                    <i:CallMethodAction TargetObject="{Binding Path=DataContext, ElementName=StagePreView, Mode=OneWay}" MethodName="OnMouseLeftButtonDownPreView" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </Canvas>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Viewbox>
                    </GroupBox>
                </Grid>
            </Grid>

        </Grid>

    </Grid>
</Window>
