<UserControl x:Class="Root_Wind._2_4_Surface"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:tools ="clr-namespace:RootTools;assembly=RootTools"
             xmlns:obs="clr-namespace:nsSizeObserver;assembly=RootTools"
             xmlns:mouse="clr-namespace:mousebehavior;assembly=RootTools"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:marterial="http://materialdesigninxaml.net/winfx/xaml/themes" 
             mc:Ignorable="d" Cursor="{Binding RecipeCursor}"
             d:DesignHeight="726" d:DesignWidth="1442" Background="#FF2D2D30">
    <UserControl.Resources>
        <SolidColorBrush x:Key="BorderBrush" Color="Gray" />
        <SolidColorBrush x:Key="BackGround" Color="#FF2D2D30" />

        <SolidColorBrush x:Key="BdrBackGround" Color="White"/>
        <SolidColorBrush x:Key="BdrTitleBackGround" Color="#FF43437A"/>
        <SolidColorBrush x:Key="TbForeGround" Color="White"/>
        <SolidColorBrush x:Key="TbBackGround" Color="#FF919191"/>

        <SolidColorBrush x:Key="TabBorderBrush" Color="Gray"/>
        <SolidColorBrush x:Key="TabBackGround" Color="#FF222223"/>
        <SolidColorBrush x:Key="TabSelected" Color="#FF43437A" />
        <SolidColorBrush x:Key="TabMouseOver" Color="#FF3E3E40"/>
        <SolidColorBrush x:Key="TabForeGround" Color="White" />

        <SolidColorBrush x:Key="BtnBorderBrush" Color="Gray" />
        <SolidColorBrush x:Key="BtnBackGround" Color="#FF222223" />
        <SolidColorBrush x:Key="BtnMouseOver" Color="#FF3E3E40" />
        <SolidColorBrush x:Key="BtnPressed" Color="#FF43437A" />
        <SolidColorBrush x:Key="BtnForeGround" Color="White" />

        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.FontFamily"
                    Value="Arial" />
            <Setter Property="TextBlock.Foreground"
                    Value="{StaticResource TbForeGround}" />
            <Setter Property="TextBlock.VerticalAlignment"
                    Value="Center" />
            <Setter Property="TextBlock.TextAlignment"
                    Value="Center" />
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="{StaticResource BtnBorderBrush}"
                                Background="{StaticResource BtnBackGround}"
                                x:Name="Bdr">
                            <TextBlock FontSize="15"
                                       Foreground="{StaticResource BtnForeGround}"
                                       FontFamily="Arial"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center">
                                <ContentPresenter Margin="10" />
                            </TextBlock>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Border.IsMouseOver"
                                     Value="True">
                                <Setter TargetName="Bdr"
                                        Property="Background"
                                        Value="{StaticResource ResourceKey=BtnMouseOver}"/>
                                <Setter Property="Cursor"
                                        Value="Hand" />
                            </Trigger>
                            <Trigger Property="Button.IsPressed"
                                     Value="True">
                                <Setter TargetName="Bdr"
                                        Property="Background"
                                        Value="{StaticResource ResourceKey=BtnPressed}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ToggleButton" x:Key="MyToggle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border CornerRadius="0"
                                Background="{StaticResource BtnBackGround}"
                                BorderBrush="{StaticResource BtnBorderBrush}"
                                BorderThickness="0"
                                x:Name="Bdr">
                            <TextBlock FontSize="15"
                                       FontFamily="Arial"
                                       Foreground="{StaticResource BtnForeGround}"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center">
                                <ContentPresenter Margin="10"/>
                            </TextBlock>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <!--#FF3E3E40-->
                                <Setter TargetName="Bdr" Property="Background" Value="{StaticResource ResourceKey=BtnMouseOver}"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Bdr" Property="Background" Value="{StaticResource ResourceKey=BtnPressed}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="Bdr" Property="Background" Value="{StaticResource ResourceKey=BtnBackGround}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="75*"/>
            <ColumnDefinition Width="25*"/>
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0" Margin="15,15,15,15">
            <tools:ImageViewer DataContext="{Binding p_ImageViewer}"
                               Width="{PriorityBinding}"
                               Height="{PriorityBinding}"/>
            <ItemsControl ItemsSource="{Binding p_UIElement}"
                          Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                          Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}"
                          Panel.ZIndex="5">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas ClipToBounds="True" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <i:Interaction.Behaviors>
                <mouse:MouseBehaviour MouseEvent="{Binding MouseEvent, Mode=OneWayToSource}"/>
            </i:Interaction.Behaviors>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseMove">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseMove}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseLeftDown}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseLeftUp}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseRightButtonDown">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseRightDown}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseWheel">
                    <i:InvokeCommandAction Command="{Binding CanvasMouseWheel}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Grid>
        <Grid Grid.Column="1" Margin="0,15,15,15">
            <Grid.RowDefinitions>
                <RowDefinition Height="2*"/>
                <RowDefinition  Height="1*"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <StackPanel>
                    <Button Content="Open Image" 
                            Command="{Binding p_ImageViewer.btnClickOpenImage}"
                            Margin="0,0,0,10"/>
                    <ListView ItemsSource="{Binding p_ListRoi}" 
                              Height="100" 
                              Margin="0,0,0,10" 
                              Background="#FF1B1B1C"
                              SelectedIndex="{Binding IndexMask}">
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding m_sName}"
                                           Foreground="White"
                                           FontWeight="Bold"
                                           FontSize="13"/>
                            </DataTemplate>
                        </ListView.ItemTemplate>

                    </ListView>
                    <ToggleButton Content="Draw" 
                                  Margin="0,0,0,10"
                                  Command="{Binding btnDraw}"
                                  Style="{StaticResource MyToggle}"
                                  IsChecked="{Binding Draw_IsChecked}"/>
                    <Button Content="Done" 
                            Margin="0,0,0,10"
                            Command="{Binding btnDone}"/>
                    <Button Content="Clear" 
                            Command="{Binding btnClear}"
                            Margin="0,0,0,10"/>
                    <Button Content="Insp Test" 
                            Command="{Binding btnInspTest}"
                            Margin="0,0,0,10"/>

                    <StackPanel>
                        <WrapPanel Margin="3">
                            <TextBlock Text="(X,Y) = " />
                            <TextBlock Text="{Binding p_ImageViewer.p_MouseX}" />
                            <TextBlock Text=", " />
                            <TextBlock Text="{Binding p_ImageViewer.p_MouseY}" />
                        </WrapPanel>
                        <WrapPanel Margin="3">
                            <TextBlock Text="(Mem X,Y) = " />
                            <TextBlock Text="{Binding p_ImageViewer.p_MouseMemX}" />
                            <TextBlock Text=", " />
                            <TextBlock Text="{Binding p_ImageViewer.p_MouseMemY}" />
                        </WrapPanel>
                        <WrapPanel Margin="3">
                            <TextBlock Text="GV = " />
                            <TextBlock Text="{Binding p_ImageViewer.p_GV}" Margin="0,0,70,0" />
                            <TextBlock Text="Zoom = " />
                            <TextBlock Text="{Binding p_ImageViewer.p_Zoom, StringFormat=F3}" 
                                           Margin="0,0,70,0"/>

                        </WrapPanel>
                        <TextBlock Text="{Binding Test}"
                                       Background="#FF43437A"
                                           Margin="0,10,0,0"/>
                        <TextBlock Text="{Binding Test2}"
                                       Background="#FF43437A"
                                           Margin="0,10,0,0"/>
                    </StackPanel>
                </StackPanel>
            </Grid>
            <Canvas Grid.Row="1" obs:SizeObserver.Observe="true" Focusable="True"
                    obs:SizeObserver.ObservedWidth="{Binding p_ImageViewer.p_ThumbWidth, Mode=OneWayToSource}"
                    obs:SizeObserver.ObservedHeight="{Binding p_ImageViewer.p_ThumbHeight, Mode=OneWayToSource}"
                    Background="Black">
                <Image Source="{Binding Path= p_ImageViewer.p_ThumNailImgSource}" />
                <Rectangle Margin="{Binding Path = p_ImageViewer.p_TumbnailImgMargin}"
                        Width="{Binding p_ImageViewer.p_TumbnailImg_Rect.Width}"
                        Height="{Binding p_ImageViewer.p_TumbnailImg_Rect.Height}" Stroke="Blue"
                        StrokeThickness="4"/>
                <i:Interaction.Behaviors>
                    <mouse:MouseBehaviour MouseEvent="{Binding MouseEvent, Mode=OneWayToSource}"/>
                    <mouse:MouseBehaviour
                            MouseX="{Binding p_ImageViewer.p_TumbMouseX, Mode=OneWayToSource}"
                            MouseY="{Binding p_ImageViewer.p_TumbMouseY, Mode=OneWayToSource}" />
                </i:Interaction.Behaviors>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding p_ImageViewer.TumbNailMouseLeftDown}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                        <i:InvokeCommandAction Command="{Binding p_ImageViewer.TumbNailMouseMove}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding p_ImageViewer.TumbNailMouseLeave}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <i:InvokeCommandAction
                                Command="{Binding p_ImageViewer.TumbNailMouseLeftUp}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Canvas>
        </Grid>

    </Grid>
</UserControl>
